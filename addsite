#!/bin/bash

# Generate passwords
DBPASS=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c12`
SFTPPASS=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c12`
ROOTDIR=/var/www/

while true
do
	echo "Select database server type:
	1) MySQL
	2) MariaDB
	3) PostgreSQL
	4) SQLite"
	read -p "Enter choice [1 - 4] " CHOICE
	case $CHOICE in
	1) DBPACKAGE="mysql-server"; break ;;
	2) DBPACKAGE="mariadb-server"; break ;;
	3) DBPACKAGE="postgresql postgresql-contrib"; break ;;
	4) DBPACKAGE=""; break ;;
	*) echo -e "${RED}Error...${STD}" && sleep 1
	esac
done
if [[ $DBPACKAGE == "mysql-server" || $DBPACKAGE == "mariadb-server" ]]; then
    DBCONNECTOR="mysqlclient"
    DBENGINE="django.db.backends.mysql"
    DBPORT="3306"
fi
if [[ $DBPACKAGE == "postgresql postgresql-contrib" ]]; then
    DBCONNECTOR="psycopg2-binary"
    DBENGINE="django.db.backends.postgresql_psycopg2"
    DBPORT="5432"
fi

# Input site name and domain name
echo -n "Enter your site name (spaces and special symbols are not allowed):"
read SITENAME
echo -n "Enter your domain name:"
read DOMAIN
echo -n "Enter username for git package to clone:"
read USERNAME
echo -n "Enter token to access repository:"
read TOKEN


# Check if the /var/www/$SITENAME dir exists
if [ -d "${ROOTDIR}${SITENAME}" ]; then
    echo "Error: directory /var/www/$SITENAME already exists"
    rm -r ${ROOTDIR}${SITENAME}
    #exit 1
fi

# Creating the working directory
HOMEDIR=${ROOTDIR}${SITENAME}
#mkdir -p /var/www/$SITENAME
cd ${ROOTDIR}
git clone https://${TOKEN}:x-oauth-basic@github.com/${USERNAME}/${SITENAME}.git

# Create a new Linux user and add it to sftp group
echo "Creating user $SITENAME..."
groupadd sftp 2> /dev/null
useradd $SITENAME -m -G sftp -s "/bin/false" -d "/var/www/$SITENAME" 2> $HOMEDIR/deploy.log
if [ "$?" -ne 0 ]; then
	echo "Can't add user"
fi
echo $SFTPPASS > ./tmp
echo $SFTPPASS >> ./tmp
cat ./tmp | passwd $SITENAME 2>> $HOMEDIR/deploy.log
rm ./tmp

# Install necessary dependencies and log to deploy.log
echo "Installing Nginx, Python pip, ufw firewall and database server..."
apt install -y nginx python3-pip $DBPACKAGE libmysqlclient-dev ufw &> $HOMEDIR/deploy.log
pip3 install virtualenv >> $HOMEDIR/deploy.log

# Configure firewall. Note that by defaults are to deny all incoming and allow all outgoing
ufw allow www
ufw allow sftp
ufw allow from 192.168.255.255
ufw enable

# Setup Python virtual environment, Django, Gunicorn, and Python MySQL connector
cd ${HOMEDIR}
mkdir -p $HOMEDIR/env
echo "Setting up virtual environment..."
virtualenv -p python3 $HOMEDIR/env >> $HOMEDIR/deploy.log
source $HOMEDIR/env/bin/activate
pip install gunicorn $DBCONNECTOR >> $HOMEDIR/deploy.log
pip install -r requirements.txt

# Create NGINX config file
echo "Creating NGINX config file..."
echo "server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    # Location of page to server
    index index.html;
    root $HOMEDIR;

    # Log files
    error_log /var/log/nginx/$SITENAME.error.log;
    access_log /var/log/nginx/$SITENAME.access.log;

    # Forbidden files or directories
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md) {
        return 404;
    }

    # Directory verification related settings for one-click application for SSL certificate
    location ~ \.well-known {
        allow all;
    }

    # Directory for static files
    location /static/ {
        alias /var/www/$SITENAME;
        autoindex on;
	      expires 30d;
        log_not_found off;
        access_log off;
    }

    # Directory for media files
    location /media/ {
        alias /var/www/$SITENAME;
        autoindex on;
	      expires 30d;
        log_not_found off;
        access_log off;
    }

    # Default directory
    location / {
      include proxy_params;
      proxy_pass http://unix:/run/gunicorn_$SITENAME.sock;
    	proxy_set_header Host $host;
    	proxy_set_header X-Real-IP $remote_addr;
    	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    	proxy_set_header REMOTE-HOST $remote_addr;

    	#Persistent connection related configuration
    	add_header X-Cache $upstream_cache_status;

    	#Set Nginx Cache
    	add_header Cache-Control no-cache;
    	expires 12h;
    }
}" > /etc/nginx/sites-available/$SITENAME.conf
ln -s /etc/nginx/sites-available/$SITENAME.conf /etc/nginx/sites-enabled/$SITENAME.conf >> $HOMEDIR/deploy.log
systemctl restart nginx

# Create Gunicorn config file
echo "Creating Gunicorn config file..."
echo "[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=$USER
Group=www-data
WorkingDirectory=${HOMEDIR}
ExecStart=$HOMEDIR/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunicorn_$SITENAME.sock app.wsgi:application

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/gunicorn_$SITENAME.service

# exit from the virtual environment and restart Gunicorn
deactivate
systemctl start gunicorn_$SITENAME
systemctl enable gunicorn_$SITENAME

if [[ $DBPACKAGE == "mysql-server" || $DBPACKAGE == "mariadb-server" ]]; then
	# Create a database and add the necessary config lines to app/settings.py
	SQL="CREATE DATABASE IF NOT EXISTS $SITENAME DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	CREATE USER '$SITENAME'@'localhost' IDENTIFIED BY '$DBPASS';
	GRANT ALL PRIVILEGES ON $SITENAME.* TO '$SITENAME'@'localhost';
	FLUSH PRIVILEGES;"
	mysql -uroot -e "$SQL"
fi
if [[ $DBPACKAGE == "postgresql postgresql-contrib" ]]; then
    su postgres -c "createuser -S -D -R -w $SITENAME"
    su postgres -c "psql -c \"ALTER USER $SITENAME WITH PASSWORD '$DBPASS';\""
    su postgres -c "createdb --owner $SITENAME $SITENAME"
fi
if [[ $DBPACKAGE != "" ]]; then
	FINDTHIS="'default': {"
	TOTHIS="'default': {\n        'ENGINE': '$DBENGINE',\n        'NAME': '$SITENAME',\n        'USER': '$SITENAME',\n        'PASSWORD': '$DBPASS',\n        'HOST': 'localhost',\n        'PORT': '$DBPORT',\n    },\n    'SQLite': {"
	sed -i -e "s/$FINDTHIS/$TOTHIS/g" ${HOMEDIR}/app/settings.py
fi

# Assigning permissions to the working directory
chmod -R 755 /var/www/$SITENAME/
chown -R $SITENAME:$SITENAME /var/www/$SITENAME/
chown root:root /var/www/$SITENAME

# collect static files
cd $HOMEDIR
source $HOMEDIR/env/bin/activate
./manage.py makemigrations && ./manage.py migrate
./manage.py createsuperuser
./manage.py collectstatic --noinput >> $HOMEDIR/deploy.log
./gunicorn -b 0.0.0.0:8000 $SITENAME.wsgi:application

# Print passwords and helpers
echo "
Done!
MySQL/SFTP username: $SITENAME
MySQL password: $DBPASS
SFTP password: $SFTPPASS
"
